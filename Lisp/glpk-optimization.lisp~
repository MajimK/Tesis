(in-package :vrp)

(let ((lp (glpk:create-problem)))
  (loop for r1 from 0 below (lenght *cvrp-distances*)
	for j1 from 0 below (lenght *cvrp-distances*)
	for j2 from 0 below (lenght *cvrp-distances*)
	for r2 from 0 below (lenght *cvrp-distances*)
	for i from 0 below (lenght *cvrp-distances*)
	do (glpk:add-binary-variable lp (format nil "X_~a_~a_~a_~a_~a" r1 j1 j2 r2 i)))
  (glpk:set-objective-direction: minimize)
  (glpk:set-objective-function lp
			       (lambda ()
				 (let ((eliminar 0) (sumar 0))
				   (loop for r1 from 0 below (length *cvrp-distances*)
					 for j1 from 0 below (length *cvrp-distances*)
					 for j2 from 0 below (length *cvrp-distances*)
					 for r2 from 0 below (length *cvrp-distances*)
					 for i from 0 below (length *cvrp-distances*)
					 do (let* ((X (glpk:get-variable lp (format nil "X_~a_~a_~a_~a_~a" r1 j1 j2 r2 i)))
						   (P_r1 (aref *cvrp-distances* r1))
						   (P_r2 (aref *cvrp-distances* r2))
						    ;; Aquí defines S, L, K, etc.
						   (S_r1 (some-calculation r1 j1 j2))
						   (L_r1 (some-calculation r1 j1 r2))
						   (K_r2 (some-calculation r2 i))))))))))
