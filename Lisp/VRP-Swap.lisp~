(in-package :vrp)
(format t "~%~% Buscando ~%~%")

(defvar *cvrp-distances* nil)

(defvar *cvrp-demands* nil)

(defvar *cvrp-capacity* nil)

(defvar *cvrp-routes* nil)


					; Ya arregle el cvrp-data.lisp


(defparameter *best-sol1*
  (with-cvrp-problem (p1 :distances *cvrp-distances*
                         :demands *cvrp-demands*
                         :capacity *cvrp-capacity*)





    (with-basic-cvrp-solution (s1 ((11 73 32 17 111 82 54 6 118 52 62 58 65 135 107 30 81 59 104 33)
(88 150 64 34 3 136 125 108 103 28 24 122 38 35 130 78 90 19 140 96)
(36 1 8 113 93 40 21 16 144 85 20 37 57 112 102 84 133)
(114 56 119 23 116 79 74 98 126 18 46 109 127 63 115 123 124 26)
(145 129 9 91 100 77 147 137 75 49 14 72 42 146 131 15 13)
(99 31 148 44 67 39 53 61 66 68 41 60 22 5 89)
(51 48 43 70 149 29 55 47 95 83 105 134 121 92 2 139 7 120)
(25 87 45 76 106 143 10 117 138 27 4 80 132 110 50 142 94 86 101)
(12 128 69 97 71 141)
)			       
 p1)

      (let* ((wc (basic-working-copy s1))
	     (ops-list nil)
	     (current-delta-cost 0)
	     (action (delta-cvrp-action))
	     (best-delta-cost nil)
	     (best-ops-list nil))
        (prepare-solution-for-neighborhood-exploration wc)
        (initialize-action-for-delta-cost-computation wc p1 action)

	(let ((start-time (get-internal-real-time)))
          (doselect-route (r1 wc)
	    (doselect-subroute (s1 r1 wc)
	      (doselect-route (r2 wc)
		(doselect-subroute (s2 r2 wc)
		  (doswap-subroutes (s1 s2 wc) 
		    (setf current-delta-cost
			(delta-cost (reverse ops-list)
				    wc
				    p1
				    action
				    ))

		  (when (or (not best-delta-cost)
			    (< current-delta-cost best-delta-cost))
		    (setf best-delta-cost current-delta-cost)
		    (setf best-ops-list (reverse ops-list)))))))
	  
	  (let ((end-time (get-internal-real-time)))
	    (format t "Tiempo transcurrido exhaustiva: ~a segundos~%"
		    (/ (- end-time start-time) ;; Diferencia en ticks
		       (float internal-time-units-per-second)))))
        (format t "the best neigh delta-cost: ~a~%" best-delta-cost)
        (format t "the best region: ~a~%" best-ops-list)
   
        (clone best-ops-list))))))
      









